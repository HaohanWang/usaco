/*
Similar as Alex's program, this one is simpler in some ways. We can treat those things like "IX" or "IV" as another positive number. We will just use the number to try every number in the ns array. I also used match1 and match2 to save the corresponding letter of each number in ns.
*/
//提供了另外一种看待罗马数字的方法。
//也提供了输出字符的方法
#include <stdio.h>
int     ns[] =
   {1000, 900, 500, 400, 100, 90, 50,  40, 10,  9,  5,   4, 1};
   //"M" "CM"  "D"  "CD" "C" "XC" "L" "XL" "X" "IX" "V" "IV" "I"
char    rs[] = {"IVXLCDM"};
int     match1[] = {6, 4, 5, 4, 4, 2, 3, 2, 2, 0, 1, 0, 0};
int     match2[] = {-1, 6, -1, 5, -1, 4, -1, 3, -1, 2, -1, 1, -1};
int     n;
int     counts[7];

void 
count (int num)
{
    int     sct[] = {3, 1, 1, 1, 3, 1, 1, 1, 3, 1, 1, 1, 3};
    int     i, j = 0;
    for (i = 0; i < 13; i++) {
	while (sct[i] > 0) {
	    if ((num - ns[i]) >= 0) {
		num -= ns[i];
		counts[match1[i]]++;
		if (match2[i] >= 0)
		    counts[match2[i]]++;
		sct[i]--;
	    }
	    else
		break;
	}
    }
}

void 
main ()
{
    FILE   *fp = fopen ("preface.in", "r");
    FILE   *wfp = fopen ("preface.out", "w");
    int     i;
    fscanf (fp, "%d", &n);
    for (i = 0; i < 7; i++)
	counts[i] = 0;
    for (i = 1; i <= n; i++)
	count (i);
    for (i = 0; i < 7; i++) {
	if (counts[i])
	    fprintf (wfp, "%c %d\n", rs[i], counts[i]);
    }
    fclose (fp);
    fclose (wfp);
}